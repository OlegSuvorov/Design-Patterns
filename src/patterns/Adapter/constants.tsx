export const codeString =
` /**
 * Целевой класс объявляет интерфейс, с которым может работать 
 * клиентский код.
 */
class Target {
    public request(): string {
        return 'Target: The default target\\'s behavior.';
    }
}

/**
 * Адаптируемый класс содержит некоторое полезное поведение, 
 * но его интерфейс несовместим с существующим клиентским кодом. 
 * Адаптируемый класс нуждается в некоторой доработке, прежде
 * чем клиентский код сможет его использовать.
 */
class Adaptee {
    public specificRequest(): string {
        return '.eetpadA eht fo roivaheb laicepS';
    }
}

/**
 * Адаптер делает интерфейс Адаптируемого класса совместимым с
 * целевым интерфейсом.
 */
class Adapter extends Target {
    private adaptee: Adaptee;

    constructor(adaptee: Adaptee) {
        super();
        this.adaptee = adaptee;
    }

    public request(): string {
        const result =
        this.adaptee
          .specificRequest()
          .split('')
          .reverse()
          .join('');
        return \`Adapter: (TRANSLATED) $\{result}\`;
    }
}
  `;

export const description = [
  `Адаптер (англ. Adapter) — структурный шаблон проектирования, предназначенный для организации использования функций 
  объекта, недоступного для модификации, через специально созданный интерфейс. Другими словами — это структурный 
  паттерн проектирования, который позволяет объектам с несовместимыми интерфейсами работать вместе.`,
  `Шаблон Адаптер позволяет в процессе проектирования не принимать во внимание возможные различия в интерфейсах уже 
  существующих классов. Если есть класс, обладающий требуемыми методами и свойствами (по крайней мере, концептуально),
   то при необходимости всегда можно воспользоваться шаблоном Адаптер для приведения его интерфейса к нужному виду.
  Близким Адаптеру является шаблон Фасад, не всегда можно отличить один от другого`,
  `Шаги реализации:`,
  `1. Убедитесь, что у вас есть два класса с несовместимыми интерфейсами:`,
  ` - полезный сервис — служебный класс, который вы не можете изменять (он либо сторонний, либо от него зависит другой код);`,
  ` - один или несколько клиентов — существующих классов приложения, несовместимых с сервисом из-за неудобного или несовпадающего интерфейса;`,
  `2. Опишите клиентский интерфейс, через который классы приложения смогли бы использовать класс сервиса`,
  `3. Создайте класс адаптера, реализовав этот интерфейс.`,
  `4. Поместите в адаптер поле, которое будет хранить ссылку на объект сервиса. Обычно это поле заполняют объектом,
      переданным в конструктор адаптера. В случае простой адаптации этот объект можно передавать через параметры методов адаптера.`,
  `5. Реализуйте все методы клиентского интерфейса в адаптере. Адаптер должен делегировать основную работу сервису.`,
  `6. Приложение должно использовать адаптер только через клиентский интерфейс. Это позволит легко изменять и добавлять адаптеры в будущем.`,
];
