export const codeString =
` /**
 * Интерфейс Субъекта объявляет общие операции как для
 * Реального Субъекта, так и для Заместителя. Пока клиент
 * работает с Реальным Субъектом, используя этот интерфейс,
 * вы сможете передать ему заместителя вместо реального субъекта.
 */
interface Subject {
    request(): void;
}

/**
 * Реальный Субъект содержит некоторую базовую бизнес-логику. Как
 * правило, Реальные Субъекты способны выполнять полезную работу,
 * которая может быть очень медленной или точной – например,
 * коррекция входных данных. Заместитель может решить эти задачи
 * без каких-либо изменений в коде Реального Субъекта.
 */
class RealSubject implements Subject {
    public request(): void {
        console.log('RealSubject: Handling request.');
    }
}

/**
 * Интерфейс Заместителя идентичен интерфейсу Реального Субъекта.
 */
class Proxy implements Subject {
    private realSubject: RealSubject;

    /**
     * Заместитель хранит ссылку на объект класса РеальныйСубъект.
     * Клиент может либо лениво загрузить его, либо передать
     * Заместителю.
     */
    constructor(realSubject: RealSubject) {
        this.realSubject = realSubject;
    }

    /**
     * Наиболее распространёнными областями применения паттерна
     * Заместитель являются ленивая загрузка, кэширование, контроль
     * доступа, ведение журнала и т.д. Заместитель может выполнить
     * зависимости от результата, передать выполнение одноимённому
     * методу в одну из этих задач, а затем, в связанном объекте
     * класса Реального Субъект.
     */
    public request(): void {
        if (this.checkAccess()) {
            this.realSubject.request();
            this.logAccess();
        }
    }

    private checkAccess(): boolean {
        // Некоторые реальные проверки должны проходить здесь.
        console.log(
        'Proxy: Checking access prior to firing a real request.'
        );

        return true;
    }

    private logAccess(): void {
        console.log('Proxy: Logging the time of request.');
    }
}
  `;

export const description = [
  `Заместитель (англ. Proxy) — структурный шаблон проектирования, предоставляющий объект, который контролирует доступ
   к другому объекту, перехватывая все вызовы (выполняет функцию контейнера).`,
  `Этот объект выступает прослойкой между клиентом и реальным сервисным объектом. 
   Заместитель получает вызовы от клиента, выполняет свою функцию (контроль доступа, 
   кеширование, изменение запроса и прочее), а затем передаёт вызов сервисному объекту.`,
  `Заместитель имеет тот же интерфейс, что и реальный объект, поэтому для клиента нет разницы — работать через заместителя или напрямую.`,
  `Проблема:`,
  ` - Необходимо контролировать доступ к объекту, не изменяя при этом поведение клиента.`,
  ` - Необходимо иметь доступ к объекту так, чтобы не создавать реальные объекты непосредственно,
   а через другой объект, который может иметь дополнительную функциональность.`,
  `Решение:`,
  `Создать суррогат реального объекта. «Заместитель» хранит ссылку, которая позволяет заместителю обратиться к
   реальному субъекту (объект класса «Заместитель» может обращаться к объекту класса «Субъект», если интерфейсы «Реального Субъекта» и «Субъекта» одинаковы).`,
  `Поскольку интерфейс «Реального Субъекта» идентичен интерфейсу «Субъекта», так, что «Заместителя» можно подставить вместо 
  «Реального Субъекта», контролирует доступ к «Реальному Субъекту», может отвечать за создание или удаление «Реального Субъекта»`,
  ` «Субъект» определяет общий для «Реального Субъекта» и «Заместителя» интерфейс так, что «Заместитель» может быть использован
   везде, где ожидается «Реальный Субъект». При необходимости запросы могут быть переадресованы «Заместителем» «Реальному Субъекту».`,
  `Виды:`,
  ` - Протоколирующий прокси: сохраняет в лог все вызовы «Субъекта» с их параметрами.`,
  ` - Удалённый заместитель (англ. remote proxies): обеспечивает связь с «Субъектом», который находится в
    другом адресном пространстве или на удалённой машине. Также может отвечать за кодирование запроса и его аргументов 
    и отправку закодированного запроса реальному «Субъекту»`,
  ` - Виртуальный заместитель (англ. virtual proxies): обеспечивает создание реального «Субъекта» только тогда, когда он
    действительно понадобится. Также может кэшировать часть информации о реальном «Субъекте», чтобы отложить его создание`,
  ` - Копировать-при-записи: обеспечивает копирование «субъекта» при выполнении клиентом определённых действий (частный 
    случай «виртуального прокси»).`,
  ` - Защищающий заместитель (англ. protection proxies): может проверять, имеет ли вызывающий объект необходимые для
    выполнения запроса права.`,
  ` - Кэширующий прокси: обеспечивает временное хранение результатов расчёта до отдачи их множественным клиентам, 
    которые могут разделить эти результаты.`,
  ` - Экранирующий прокси: защищает «Субъект» от опасных клиентов (или наоборот).`,
  ` - Синхронизирующий прокси: производит синхронизированный контроль доступа к «Субъекту» в асинхронной многопоточной среде.`,
  ` - «Умная» ссылка (англ. smart reference proxy): производит дополнительные действия, когда на «Субъект» создается ссылка,
    например, рассчитывает количество активных ссылок на «Субъект».`,
  `Преимущества: `,
  ` - удалённый заместитель;`,
  ` - виртуальный заместитель может выполнять оптимизацию;`,
  ` - защищающий заместитель;`,
  ` - «умная» ссылка(указатель);`,
  `Недостатки:`,
  ` - резкое увеличение времени отклика.`,
  `Сфера применения:`,
  `Шаблон Proxy может применяться в случаях работы с сетевым соединением, с огромным объектом в памяти (или на диске) или с
   любым другим ресурсом, который сложно или тяжело копировать. Хорошо известный пример применения — объект, подсчитывающий число ссылок.`
];
